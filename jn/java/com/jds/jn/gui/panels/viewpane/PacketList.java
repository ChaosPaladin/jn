package com.jds.jn.gui.panels.viewpane;

import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ResourceBundle;

import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.KeyStroke;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.jds.jn.gui.panels.ViewPane;
import com.jds.jn.gui.panels.viewpane.packetlist.CryptedPacketListPane;
import com.jds.jn.gui.panels.viewpane.packetlist.DecryptedPacketListPane;

/**
 * Author: VISTALL
 * Company: J Develop Station
 * Date: Sep 29, 2009
 * Time: 10:00:48 PM
 */
public class PacketList extends HiddenPanel
{
	private class ShowPaneActionListenerImpl implements ActionListener
	{
		private boolean _val;

		public ShowPaneActionListenerImpl(boolean val)
		{
			_val = val;
		}

		@Override
		public void actionPerformed(ActionEvent e)
		{
			showPane(_val);
		}
	}

	private JPanel root;
	protected CryptedPacketListPane _cryptedPacketListPane;
	protected DecryptedPacketListPane _decPacketListPane;
	protected ViewPane _pane;

	private JPopupMenu popup;

	public PacketList(ViewPane pane)
	{
		_pane = pane;
		$$$setupUI$$$();

		_cryptedPacketListPane = new CryptedPacketListPane(_pane);
		_decPacketListPane = new DecryptedPacketListPane(_pane);

		_decPacketListPane.setVisible(false);
		_cryptedPacketListPane.setVisible(false);

		add(_decPacketListPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		add(_cryptedPacketListPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));

		popup = new JPopupMenu();


		JRadioButton radio1 = new JRadioButton(ResourceBundle.getBundle("com/jds/jn/resources/bundle/LanguageBundle").getString("DecodeList"));
		radio1.addActionListener(new ShowPaneActionListenerImpl(false));

		JRadioButton radio2 = new JRadioButton(ResourceBundle.getBundle("com/jds/jn/resources/bundle/LanguageBundle").getString("NotDecodeList"));
		radio2.addActionListener(new ShowPaneActionListenerImpl(true));

		registerKeyboardAction(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				popup.show(PacketList.this, 0, 0);
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_MASK), JComponent.WHEN_IN_FOCUSED_WINDOW);

		ButtonGroup group = new ButtonGroup();

		group.add(radio1);
		group.add(radio2);

		popup.add(radio1);
		popup.add(radio2);

		addMouseListener(new MouseListener()
		{

			@Override
			public void mouseClicked(MouseEvent e)
			{
				if(e.getButton() == MouseEvent.BUTTON3)
				{
					popup.show(PacketList.this, e.getX(), e.getY());
				}
			}

			@Override
			public void mousePressed(MouseEvent e)
			{

			}

			@Override
			public void mouseReleased(MouseEvent e)
			{

			}

			@Override
			public void mouseEntered(MouseEvent e)
			{

			}

			@Override
			public void mouseExited(MouseEvent e)
			{

			}
		});
	}

	@Override
	public void setEnabled(boolean b)
	{
		_decPacketListPane.setEnabled(b);
		_cryptedPacketListPane.setEnabled(b);

		super.setEnabled(b);
	}

	public DecryptedPacketListPane getDecryptedPacketListPane()
	{
		return _decPacketListPane;
	}

	public CryptedPacketListPane getCryptedPacketListPane()
	{
		return _cryptedPacketListPane;
	}

	public void showPane(boolean crypted)
	{
		_decPacketListPane.setVisible(false);
		_cryptedPacketListPane.setVisible(false);

		(crypted ? _cryptedPacketListPane : _decPacketListPane).setVisible(true);
	}

	private void createUIComponents()
	{
		root = this;
		setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		createUIComponents();
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$()
	{
		return root;
	}
}
